/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Book-store API
 * API for book store management
 * OpenAPI spec version: 1.0.2
 */
import {
  z as zod
} from 'zod';

/**
 * Adds shipping information for the currently authenticated user.
 * @summary Add shipping information
 */
export const addShippingInfoBody = zod.object({
  "name": zod.string().optional().describe('address fistname'),
  "lastname": zod.string().optional().describe('address lastname'),
  "address": zod.string().optional().describe('address'),
  "cap": zod.string().optional().describe('cap'),
  "phoneNumber": zod.string().optional().describe('telephone number'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('Country of shipping'),
  "userProfileId": zod.number().optional().describe('user id')
}).describe('Shipping information to add')

export const addShippingInfoResponse = zod.object({
  "id": zod.number().optional().describe('id'),
  "name": zod.string().optional().describe('name'),
  "lastname": zod.string().optional().describe('lastname'),
  "address": zod.string().optional().describe('address of owner'),
  "cap": zod.string().optional().describe('city cap'),
  "phoneNumber": zod.string().optional().describe('telephone number'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('country'),
  "userProfileId": zod.number().optional().describe('user id'),
  "userProfileName": zod.string().optional().describe('user name')
})


/**
 * @summary Get list of books
 */
export const getBooksQueryParams = zod.object({
  "filters": zod.object({
  "minPrice": zod.number().optional().describe('Minimum price of the book'),
  "maxPrice": zod.number().optional().describe('Maximum price of the book'),
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Book genre'),
  "contains": zod.string().optional().describe('Partial match in title or description'),
  "authorId": zod.number().optional().describe('ID of the author'),
  "minPages": zod.number().optional().describe('Minimum number of pages'),
  "maxPages": zod.number().optional().describe('Maximum number of pages'),
  "format": zod.enum(['PAPERBACK', 'HARDCOVER', 'AUDIOBOOK', 'PDF', 'EBOOK']).optional().describe('Book format'),
  "language": zod.string().optional().describe('Language of the book'),
  "publisher": zod.string().optional().describe('Publisher name'),
  "minDiscount": zod.number().optional().describe('Minimum discount'),
  "maxDiscount": zod.number().optional().describe('Maximum discount'),
  "fromDate": zod.string().date().optional().describe('Published from date'),
  "toDate": zod.string().date().optional().describe('Published to date'),
  "minRating": zod.number().optional().describe('Minimum rating (0‚Äì5)'),
  "maxRating": zod.number().optional().describe('Maximum rating (0‚Äì5)')
})
})

export const getBooksResponse = zod.object({
  "id": zod.number().optional().describe('Book\'s id'),
  "title": zod.string().optional().describe('Book\'s title'),
  "isbn": zod.string().optional().describe('Book\'s ISBN'),
  "price": zod.number().optional().describe('Book\'s price'),
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Book\'s genre'),
  "format": zod.enum(['PAPERBACK', 'HARDCOVER', 'AUDIOBOOK', 'PDF', 'EBOOK']).optional().describe('Book\'s format'),
  "description": zod.string().optional().describe('Book\'s description'),
  "publisher": zod.string().optional().describe('Book\'s publisher'),
  "language": zod.string().optional().describe('Book\'s language'),
  "pages": zod.number().optional().describe('Book\'s pages count'),
  "discount": zod.number().optional().describe('Book\'s discount'),
  "publicationDate": zod.string().date().optional().describe('Book\'s publication date'),
  "authorId": zod.number().optional().describe('Book\'s author ID'),
  "authorName": zod.string().optional().describe('Book\'s author name'),
  "rating": zod.number().optional().describe('Book\'s rating')
}).describe('DTO for book response')


/**
 * @summary Create a new book
 */
export const createBookBodyDescriptionMax = 1000;


export const createBookBody = zod.object({
  "title": zod.string().optional().describe('Title of the book'),
  "isbn": zod.string().optional().describe('ISBN code of the book'),
  "price": zod.number().optional().describe('Book price'),
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Book genre'),
  "format": zod.enum(['PAPERBACK', 'HARDCOVER', 'AUDIOBOOK', 'PDF', 'EBOOK']).optional().describe('Book format'),
  "description": zod.string().max(createBookBodyDescriptionMax).optional().describe('Description of the book'),
  "publisher": zod.string().optional().describe('Publisher of the book'),
  "language": zod.string().optional().describe('Language of the book'),
  "pages": zod.number().optional().describe('Number of pages'),
  "discount": zod.number().optional().describe('Discount on the book'),
  "publicationDate": zod.string().date().optional().describe('Publication date of the book'),
  "rating": zod.number().optional().describe('Rating of the book'),
  "authorId": zod.number().optional().describe('Author ID')
}).describe('DTO for book request')


/**
 * @summary Get list of authors
 */
export const getAuthorsQueryParams = zod.object({
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Use genre to filter the GET request')
})

export const getAuthorsResponseItem = zod.object({
  "id": zod.number().optional().describe('Author\'s id'),
  "name": zod.string().optional().describe('Author\'s name'),
  "age": zod.number().optional().describe('Author\'s age'),
  "bio": zod.string().optional().describe('Author\'s biography'),
  "books": zod.array(zod.object({
  "id": zod.number().optional().describe('Book\'s id'),
  "title": zod.string().optional().describe('Book\'s title'),
  "isbn": zod.string().optional().describe('Book\'s ISBN'),
  "price": zod.number().optional().describe('Book\'s price'),
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Book\'s genre'),
  "format": zod.enum(['PAPERBACK', 'HARDCOVER', 'AUDIOBOOK', 'PDF', 'EBOOK']).optional().describe('Book\'s format'),
  "description": zod.string().optional().describe('Book\'s description'),
  "publisher": zod.string().optional().describe('Book\'s publisher'),
  "language": zod.string().optional().describe('Book\'s language'),
  "pages": zod.number().optional().describe('Book\'s pages count'),
  "discount": zod.number().optional().describe('Book\'s discount'),
  "publicationDate": zod.string().date().optional().describe('Book\'s publication date'),
  "authorId": zod.number().optional().describe('Book\'s author ID'),
  "authorName": zod.string().optional().describe('Book\'s author name'),
  "rating": zod.number().optional().describe('Book\'s rating')
}).describe('DTO for book response')).optional().describe('Author\'s books')
}).describe('DTO for author response')
export const getAuthorsResponse = zod.array(getAuthorsResponseItem)


/**
 * @summary Create a new author
 */
export const createAuthorBodyBioMax = 2000;


export const createAuthorBody = zod.object({
  "name": zod.string().optional().describe('Author\'s name'),
  "age": zod.number().optional().describe('Author\'s age'),
  "bio": zod.string().max(createAuthorBodyBioMax).optional().describe('Author\'s biography')
}).describe('DTO for author request')


/**
 * Registers a new user in the system
 * @summary Registration
 */
export const registerBodyPasswordMin = 8;

export const registerBodyPasswordMax = 2147483647;


export const registerBody = zod.object({
  "email": zod.string().min(1).optional().describe('Your email'),
  "password": zod.string().min(registerBodyPasswordMin).max(registerBodyPasswordMax).optional().describe('Password of account'),
  "age": zod.number().describe('Your age'),
  "role": zod.enum(['ADMIN', 'CUSTOMER', 'RETAILER']).optional().describe('Your role'),
  "name": zod.string().min(1).optional().describe('Name of profile\'s owner'),
  "lastname": zod.string().min(1).optional().describe('lastname of profile\'s owner'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('City of profile\'s owner')
}).describe('User data and credentials for registration')


/**
 * Authenticates a registered user
 * @summary Login
 */
export const loginBody = zod.object({
  "email": zod.string().optional().describe('Your email'),
  "password": zod.string().optional().describe('Your Password')
}).describe('User credentials [email, password]')

export const loginResponse = zod.object({
  "token": zod.string().optional()
})


/**
 * Deletes a user profile by ID. Access restricted to ADMIN.
 * @summary Delete profile by ID (admin)
 */
export const _deleteParams = zod.object({
  "id": zod.number().describe('ID of the profile to delete')
})


/**
 * Updates the data of a specific profile by ID. Access restricted to ADMIN.
 * @summary Update profile by ID (admin)
 */
export const patchParams = zod.object({
  "id": zod.number().describe('ID of the profile to update')
})

export const patchBody = zod.object({
  "name": zod.string().optional().describe('Name of profile\'s owner'),
  "lastname": zod.string().optional().describe('lastname of profile\'s owner'),
  "email": zod.string().optional().describe('Email of profile\'s owner'),
  "age": zod.number().optional().describe('Age of profile owner'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('country of profile owner')
}).describe('Profile data to update')

export const patchResponse = zod.object({
  "id": zod.number().optional().describe('id of profile\'s owner'),
  "name": zod.string().optional().describe('Name of profile\'s owner'),
  "lastname": zod.string().optional().describe('lastname of profile\'s owner'),
  "email": zod.string().optional().describe('Email of profile\'s owner'),
  "age": zod.number().optional().describe('Age of profile owner'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('country of profile owner')
})


/**
 * Partially updates the profile of the currently authenticated user.
 * @summary Patch current user's profile
 */
export const patchMyProfileBody = zod.object({
  "name": zod.string().optional().describe('Name of profile\'s owner'),
  "lastname": zod.string().optional().describe('lastname of profile\'s owner'),
  "email": zod.string().optional().describe('Email of profile\'s owner'),
  "age": zod.number().optional().describe('Age of profile owner'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('country of profile owner')
}).describe('Profile data to update')

export const patchMyProfileResponse = zod.object({
  "id": zod.number().optional().describe('id of profile\'s owner'),
  "name": zod.string().optional().describe('Name of profile\'s owner'),
  "lastname": zod.string().optional().describe('lastname of profile\'s owner'),
  "email": zod.string().optional().describe('Email of profile\'s owner'),
  "age": zod.number().optional().describe('Age of profile owner'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('country of profile owner')
})


/**
 * Retrieves a cart by its ID.
 * @summary Get cart by ID
 */
export const getCartParams = zod.object({
  "id": zod.number().describe('Cart ID')
})

export const getCartResponse = zod.object({
  "id": zod.number().optional().describe('Cart id'),
  "userId": zod.number().optional().describe('User\'s id'),
  "books": zod.array(zod.object({
  "bookId": zod.number().optional().describe('Book\'s id'),
  "bookTitle": zod.string().optional().describe('Book\'s title'),
  "bookIsbn": zod.string().optional().describe('Book\'s isbn'),
  "bookPrice": zod.number().optional().describe('Book\'s price'),
  "quantity": zod.number().optional().describe('Book\'s quantity')
}).describe('DTO for single cart item response')).optional().describe('List of book in the cart')
}).describe('DTO for cart response')


/**
 * Deletes an existing cart by its ID.
 * @summary Delete cart
 */
export const delete1Params = zod.object({
  "id": zod.number().describe('ID of the cart to delete')
})


/**
 * Updates the data of an existing cart.
 * @summary Update cart
 */
export const patch1Params = zod.object({
  "id": zod.number().describe('ID of the cart to update')
})

export const patch1Body = zod.object({
  "userId": zod.number().optional().describe('Owner of the cart')
}).describe('DTO for Cart Request')

export const patch1Response = zod.object({
  "id": zod.number().optional().describe('Cart id'),
  "userId": zod.number().optional().describe('User\'s id'),
  "books": zod.array(zod.object({
  "bookId": zod.number().optional().describe('Book\'s id'),
  "bookTitle": zod.string().optional().describe('Book\'s title'),
  "bookIsbn": zod.string().optional().describe('Book\'s isbn'),
  "bookPrice": zod.number().optional().describe('Book\'s price'),
  "quantity": zod.number().optional().describe('Book\'s quantity')
}).describe('DTO for single cart item response')).optional().describe('List of book in the cart')
}).describe('DTO for cart response')


/**
 * Decreases the quantity of an item in the logged-in user's cart. If quantity reaches zero, the item may be removed.
 * @summary Decrease item quantity in cart
 */
export const decreaseItemToCartParams = zod.object({
  "bookId": zod.number().describe('ID of the item to decrease')
})

export const decreaseItemToCartResponse = zod.object({
  "bookId": zod.number().optional().describe('Book\'s id'),
  "bookTitle": zod.string().optional().describe('Book\'s title'),
  "bookIsbn": zod.string().optional().describe('Book\'s isbn'),
  "bookPrice": zod.number().optional().describe('Book\'s price'),
  "quantity": zod.number().optional().describe('Book\'s quantity')
}).describe('DTO for single cart item response')


/**
 * Adds an item to the cart of the logged-in user.
 * @summary Add an item to the cart
 */
export const addItemToCartParams = zod.object({
  "bookId": zod.number().describe('ID of the item to add to the cart')
})

export const addItemToCartResponse = zod.object({
  "bookId": zod.number().optional().describe('Book\'s id'),
  "bookTitle": zod.string().optional().describe('Book\'s title'),
  "bookIsbn": zod.string().optional().describe('Book\'s isbn'),
  "bookPrice": zod.number().optional().describe('Book\'s price'),
  "quantity": zod.number().optional().describe('Book\'s quantity')
}).describe('DTO for single cart item response')


/**
 * @summary Get book by ID
 */
export const getBookParams = zod.object({
  "id": zod.number()
})

export const getBookResponse = zod.object({
  "id": zod.number().optional().describe('Book\'s id'),
  "title": zod.string().optional().describe('Book\'s title'),
  "isbn": zod.string().optional().describe('Book\'s ISBN'),
  "price": zod.number().optional().describe('Book\'s price'),
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Book\'s genre'),
  "format": zod.enum(['PAPERBACK', 'HARDCOVER', 'AUDIOBOOK', 'PDF', 'EBOOK']).optional().describe('Book\'s format'),
  "description": zod.string().optional().describe('Book\'s description'),
  "publisher": zod.string().optional().describe('Book\'s publisher'),
  "language": zod.string().optional().describe('Book\'s language'),
  "pages": zod.number().optional().describe('Book\'s pages count'),
  "discount": zod.number().optional().describe('Book\'s discount'),
  "publicationDate": zod.string().date().optional().describe('Book\'s publication date'),
  "authorId": zod.number().optional().describe('Book\'s author ID'),
  "authorName": zod.string().optional().describe('Book\'s author name'),
  "rating": zod.number().optional().describe('Book\'s rating')
}).describe('DTO for book response')


/**
 * @summary Delete a book
 */
export const deleteBookParams = zod.object({
  "id": zod.number()
})


/**
 * @summary Update book information
 */
export const patchBookParams = zod.object({
  "id": zod.number()
})

export const patchBookBodyDescriptionMax = 1000;


export const patchBookBody = zod.object({
  "title": zod.string().optional().describe('Title of the book'),
  "isbn": zod.string().optional().describe('ISBN code of the book'),
  "price": zod.number().optional().describe('Book price'),
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Book genre'),
  "format": zod.enum(['PAPERBACK', 'HARDCOVER', 'AUDIOBOOK', 'PDF', 'EBOOK']).optional().describe('Book format'),
  "description": zod.string().max(patchBookBodyDescriptionMax).optional().describe('Description of the book'),
  "publisher": zod.string().optional().describe('Publisher of the book'),
  "language": zod.string().optional().describe('Language of the book'),
  "pages": zod.number().optional().describe('Number of pages'),
  "discount": zod.number().optional().describe('Discount on the book'),
  "publicationDate": zod.string().date().optional().describe('Publication date of the book'),
  "rating": zod.number().optional().describe('Rating of the book'),
  "authorId": zod.number().optional().describe('Author ID')
}).describe('DTO for book request')


/**
 * @summary Get author by ID
 */
export const getAuthorParams = zod.object({
  "id": zod.number()
})

export const getAuthorResponse = zod.object({
  "id": zod.number().optional().describe('Author\'s id'),
  "name": zod.string().optional().describe('Author\'s name'),
  "age": zod.number().optional().describe('Author\'s age'),
  "bio": zod.string().optional().describe('Author\'s biography'),
  "books": zod.array(zod.object({
  "id": zod.number().optional().describe('Book\'s id'),
  "title": zod.string().optional().describe('Book\'s title'),
  "isbn": zod.string().optional().describe('Book\'s ISBN'),
  "price": zod.number().optional().describe('Book\'s price'),
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Book\'s genre'),
  "format": zod.enum(['PAPERBACK', 'HARDCOVER', 'AUDIOBOOK', 'PDF', 'EBOOK']).optional().describe('Book\'s format'),
  "description": zod.string().optional().describe('Book\'s description'),
  "publisher": zod.string().optional().describe('Book\'s publisher'),
  "language": zod.string().optional().describe('Book\'s language'),
  "pages": zod.number().optional().describe('Book\'s pages count'),
  "discount": zod.number().optional().describe('Book\'s discount'),
  "publicationDate": zod.string().date().optional().describe('Book\'s publication date'),
  "authorId": zod.number().optional().describe('Book\'s author ID'),
  "authorName": zod.string().optional().describe('Book\'s author name'),
  "rating": zod.number().optional().describe('Book\'s rating')
}).describe('DTO for book response')).optional().describe('Author\'s books')
}).describe('DTO for author response')


/**
 * @summary Delete an author
 */
export const deleteAuthorParams = zod.object({
  "id": zod.number()
})


/**
 * @summary Update author information
 */
export const patchAuthorParams = zod.object({
  "id": zod.number()
})

export const patchAuthorBodyBioMax = 2000;


export const patchAuthorBody = zod.object({
  "name": zod.string().optional().describe('Author\'s name'),
  "age": zod.number().optional().describe('Author\'s age'),
  "bio": zod.string().max(patchAuthorBodyBioMax).optional().describe('Author\'s biography')
}).describe('DTO for author request')


/**
 * Returns a complete list of user profiles. Access restricted to ADMIN.
 * @summary Retrieve all user profiles
 */
export const getAllResponse = zod.object({
  "id": zod.number().optional().describe('id of profile\'s owner'),
  "name": zod.string().optional().describe('Name of profile\'s owner'),
  "lastname": zod.string().optional().describe('lastname of profile\'s owner'),
  "email": zod.string().optional().describe('Email of profile\'s owner'),
  "age": zod.number().optional().describe('Age of profile owner'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('country of profile owner')
})


/**
 * Retrieves the profile information of the currently authenticated user.
 * @summary Get current user's profile
 */
export const getMyProfileResponse = zod.object({
  "id": zod.number().optional().describe('id of profile\'s owner'),
  "name": zod.string().optional().describe('Name of profile\'s owner'),
  "lastname": zod.string().optional().describe('lastname of profile\'s owner'),
  "email": zod.string().optional().describe('Email of profile\'s owner'),
  "age": zod.number().optional().describe('Age of profile owner'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('country of profile owner')
})


/**
 * Returns a list of user profiles that belong to a specific country. Accessible only by users with ADMIN role.
 * @summary Get user profiles by country
 */
export const getProfilesByCountryQueryParams = zod.object({
  "name": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).describe('Country to filter users by')
})

export const getProfilesByCountryResponseItem = zod.object({
  "id": zod.number().optional().describe('id of profile\'s owner'),
  "name": zod.string().optional().describe('Name of profile\'s owner'),
  "lastname": zod.string().optional().describe('lastname of profile\'s owner'),
  "email": zod.string().optional().describe('Email of profile\'s owner'),
  "age": zod.number().optional().describe('Age of profile owner'),
  "country": zod.enum(['PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'RO', 'BA', 'BB', 'RS', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'SA', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'SI', 'BY', 'BZ', 'SL', 'SM', 'SN', 'SO', 'CA', 'SR', 'CC', 'CD', 'SU', 'CF', 'CG', 'CH', 'CI', 'SZ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CR', 'CS', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'TL', 'TM', 'TN', 'TO', 'TP', 'TR', 'TT', 'DE', 'TV', 'DG', 'DJ', 'DK', 'DM', 'DO', 'UA', 'UG', 'DZ', 'UM', 'EA', 'EC', 'EE', 'EG', 'EH', 'UY', 'UZ', 'VA', 'ER', 'ES', 'ET', 'EU', 'VG', 'VI', 'EZ', 'VN', 'VU', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'WF', 'FX', 'GA', 'GB', 'WS', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'XI', 'GY', 'XK', 'XU', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'ZA', 'IQ', 'IR', 'IS', 'IT', 'ZM', 'ZR', 'JE', 'ZW', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NT', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'RE', 'RU', 'RW', 'SB', 'SC', 'SE', 'SG', 'SJ', 'SK', 'SS', 'SV', 'SX', 'SY', 'TA', 'TC', 'TD', 'TF', 'TH', 'TJ', 'TW', 'TZ', 'UK', 'US', 'VC', 'VE', 'YE', 'YT', 'YU', 'SD', 'SF', 'SH', 'ST', 'TG', 'TK']).optional().describe('country of profile owner')
})
export const getProfilesByCountryResponse = zod.array(getProfilesByCountryResponseItem)


/**
 * Retrieves all carts for administrative purposes.
 * @summary Get all carts
 */
export const getAll1Response = zod.object({
  "id": zod.number().optional().describe('Cart id'),
  "userId": zod.number().optional().describe('User\'s id'),
  "books": zod.array(zod.object({
  "bookId": zod.number().optional().describe('Book\'s id'),
  "bookTitle": zod.string().optional().describe('Book\'s title'),
  "bookIsbn": zod.string().optional().describe('Book\'s isbn'),
  "bookPrice": zod.number().optional().describe('Book\'s price'),
  "quantity": zod.number().optional().describe('Book\'s quantity')
}).describe('DTO for single cart item response')).optional().describe('List of book in the cart')
}).describe('DTO for cart response')


/**
 * Retrieves the cart of a specific user by their ID.
 * @summary Get cart by user ID
 */
export const getUserCartParams = zod.object({
  "userId": zod.number().describe('User ID')
})

export const getUserCartResponse = zod.object({
  "id": zod.number().optional().describe('Cart id'),
  "userId": zod.number().optional().describe('User\'s id'),
  "books": zod.array(zod.object({
  "bookId": zod.number().optional().describe('Book\'s id'),
  "bookTitle": zod.string().optional().describe('Book\'s title'),
  "bookIsbn": zod.string().optional().describe('Book\'s isbn'),
  "bookPrice": zod.number().optional().describe('Book\'s price'),
  "quantity": zod.number().optional().describe('Book\'s quantity')
}).describe('DTO for single cart item response')).optional().describe('List of book in the cart')
}).describe('DTO for cart response')


/**
 * Retrieves the cart of the currently logged-in user.
 * @summary Get your cart
 */
export const getMyCartResponse = zod.object({
  "id": zod.number().optional().describe('Cart id'),
  "userId": zod.number().optional().describe('User\'s id'),
  "books": zod.array(zod.object({
  "bookId": zod.number().optional().describe('Book\'s id'),
  "bookTitle": zod.string().optional().describe('Book\'s title'),
  "bookIsbn": zod.string().optional().describe('Book\'s isbn'),
  "bookPrice": zod.number().optional().describe('Book\'s price'),
  "quantity": zod.number().optional().describe('Book\'s quantity')
}).describe('DTO for single cart item response')).optional().describe('List of book in the cart')
}).describe('DTO for cart response')


/**
 * @summary Get all books by a specific author
 */
export const getBookByAuthorQueryParams = zod.object({
  "authorName": zod.string()
})

export const getBookByAuthorResponse = zod.object({
  "id": zod.number().optional().describe('Book\'s id'),
  "title": zod.string().optional().describe('Book\'s title'),
  "isbn": zod.string().optional().describe('Book\'s ISBN'),
  "price": zod.number().optional().describe('Book\'s price'),
  "genre": zod.enum(['HORROR', 'FANTASY', 'THRILLER', 'DOCUMENTARY', 'ADVENTURE', 'NEWS', 'DRAMMATIC', 'ROMANTIC', 'COMIC', 'MISTERY', 'CLASSIC', 'SCIENCE_FICTION']).optional().describe('Book\'s genre'),
  "format": zod.enum(['PAPERBACK', 'HARDCOVER', 'AUDIOBOOK', 'PDF', 'EBOOK']).optional().describe('Book\'s format'),
  "description": zod.string().optional().describe('Book\'s description'),
  "publisher": zod.string().optional().describe('Book\'s publisher'),
  "language": zod.string().optional().describe('Book\'s language'),
  "pages": zod.number().optional().describe('Book\'s pages count'),
  "discount": zod.number().optional().describe('Book\'s discount'),
  "publicationDate": zod.string().date().optional().describe('Book\'s publication date'),
  "authorId": zod.number().optional().describe('Book\'s author ID'),
  "authorName": zod.string().optional().describe('Book\'s author name'),
  "rating": zod.number().optional().describe('Book\'s rating')
}).describe('DTO for book response')


/**
 * Removes an item from the cart of the logged-in user.
 * @summary Remove an item from the cart
 */
export const removeItemFromCartParams = zod.object({
  "bookId": zod.number().describe('ID of the item to remove')
})
